plugins { id 'com.android.application'; id 'org.jetbrains.kotlin.android' }

android {
  namespace 'com.example.consentmonitor'
  compileSdk 34
  defaultConfig {
    applicationId "com.example.consentmonitor"
    minSdk 26
    targetSdk 34
    versionCode 2
    versionName "1.1"
  }
  signingConfigs {
    if (System.getenv("SIGNING_KEYSTORE")) {
      release {
        storeFile file(System.getenv("SIGNING_KEYSTORE"))
        storePassword System.getenv("STORE_PASS")
        keyAlias System.getenv("KEY_ALIAS")
        keyPassword System.getenv("KEY_PASS")
      }
    }
  }
  buildTypes {
    release {
      minifyEnabled false
      if (signingConfigs.findByName("release") != null) {
        signingConfig signingConfigs.release
      }
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }
    debug { minifyEnabled false }
  }
  compileOptions { sourceCompatibility JavaVersion.VERSION_17; targetCompatibility JavaVersion.VERSION_17 }
  kotlinOptions { jvmTarget = '17' }
}

dependencies {
  implementation platform('com.google.firebase:firebase-bom:33.3.0')
  implementation 'com.google.firebase:firebase-firestore-ktx'
  implementation 'com.google.firebase:firebase-auth-ktx'

  implementation 'androidx.core:core-ktx:1.13.1'
  implementation 'androidx.appcompat:appcompat:1.7.0'
  implementation 'com.google.android.material:material:1.12.0'
  implementation 'androidx.activity:activity-ktx:1.9.2'
  implementation 'com.google.android.gms:play-services-location:21.3.0'
}

def gs = file("$projectDir/google-services.json")
if (gs.exists()) {
  apply plugin: 'com.google.gms.google-services'
  println("Applying google-services plugin (google-services.json found)")
} else {
  println("google-services.json not found â€” skipping plugin (build still works).")
}
